{
  "hash": "39ee4c978218dc852546a2c05e141627",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: gfm\nlayout: single_md.pug\ntags: [\"posts\"]\ntitle: \"Minimal perfect hashing\"\nauthor: \"Matt Piekenbrock\"\ndate: '2024-02-25'\nslug: mphf1\ninclude_toc: true\ncategories: [\"math\", \"hashing\", \"C++\"]\ndraft: true\neditor: \n    rendor-on-save: true\nexecute:\n  echo: false\n  eval: false \n  freeze: auto\n  cache: true\nbibliography: ../references.bib\n---\n\n\nA _hash function_ is a function $h : U \\to M$ that maps some set of $n$ keys $S \\subseteq U$ to some set $M$, typically a subset of the integers $M \\subset \\mathbb{Z}$. A _perfect hash function_ is an injection $h : S \\to M$, where $m = \\lvert M \\rvert$ must necessarily satisfy $m \\geq n$. If $m = n$ and $M = \\{0, 1, \\dots, n - 1\\}$, $h$ is called a _minimal perfect hash function_ (MPHF). If additionally, for any pair of keys $s, s' \\in S$ with $s < s'$ the map $h$ satisfies $h(s) < h(s')$, then $h$ is called _order preserving_. \n\nPerfect hashing \nGiven a universe $U$ and a fixed subset of keys $S \\subseteq U$, a hashing function is a function that resembles a function $f: S \\to I$ to some index set. \n\nWhen $I$ \n\n\n\n",
    "supporting": [
      "mphf_files"
    ],
    "filters": []
  }
}